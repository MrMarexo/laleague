// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  email                   String?         @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  challenges              UserChallenge[]
  tasks              UserChallengeTask[]
  points                  Int             @default(0)
  placements              Int[]
  curChallengeExtraPoints Int             @default(0)
  rank Rank? @relation(fields: [rankId], references: [id])
  rankId Int?

  @@index([rankId])
}

model Rank {
  id   Int @id @default(autoincrement())
  name String
  minPoints Int
  maxPoints Int
  users User[]
}

model Difficulty {
  id   Int @id @default(autoincrement())
  name String
  description String
  points Int
  tasks Task[]
}

model TaskType {
  id   Int @id @default(autoincrement())
  name String
  description String
  tasks Task[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  extraPoints      Int
  tasks       Task[]
  users       UserChallenge[]
}

model Task {
  id                String              @id @default(cuid())
  title             String
  description       String
  challenge         Challenge           @relation(fields: [challengeId], references: [id])
  challengeId       String
  UserChallengeTask UserChallengeTask[]
  difficulty Difficulty @relation(fields: [difficultyId], references: [id])
  difficultyId Int
  taskType TaskType @relation(fields: [taskTypeId], references: [id])
  taskTypeId Int


  @@index([challengeId])
  @@index([difficultyId])
  @@index([taskTypeId])

}

model UserChallengeTask {
  id              String        @id @default(cuid())
  task            Task          @relation(fields: [taskId], references: [id])
  taskId          String
  userChallenge   UserChallenge @relation(fields: [userChallengeId], references: [id])
  userChallengeId String
  taskCompletedAt DateTime?
  notes           String?
  user User @relation(fields: [userId], references: [id])
  userId String

  @@index([userChallengeId])
  @@index([taskId])
  @@index([userId])
}

model UserChallenge {
  id                 String              @id @default(cuid())
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  challenge          Challenge           @relation(fields: [challengeId], references: [id])
  challengeId        String
  dateCompleted      DateTime?
  isCompleted        Boolean?
  userChallengeTasks UserChallengeTask[]
  placement          Int?

  @@index([userId])
  @@index([challengeId])
}



// model UserTask {
//   id             String       @id @default(cuid())
//   user           User      @relation(fields: [userId], references: [id])
//   userId        String
//   task           Task      @relation(fields: [taskId], references: [id])
//   taskId        String
//   dateCompleted DateTime?
//   challenge      Challenge @relation(fields: [challengeId], references: [id])
//   challengeId   String

//   @@index([userId])
//   @@index([challengeId])
//   @@index([taskId])
// }
